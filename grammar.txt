program ::= extern_list decl_list 
        | decl_list
/extern_list ::= extern_list extern
            |  extern
/extern ::= "extern" type_spec IDENT "(" params ")" ";"
        | "extern" type_spec IDENT "(" ")" ";"
decl_list ::= decl_list decl
            |  decl
decl ::= var_decl 
    |  fun_decl
/var_decl ::= var_type IDENT ";" 
/type_spec ::= "void"
            |  var_type           
/var_type  ::= "int" |  "float" |  "bool"
/fun_decl ::= type_spec IDENT "(" params ")" block
            | type_spec IDENT "(" ")" block
/params ::= param_list  
        |  "void" 
/param_list ::= param_list "," param 
            |  param
/param ::= var_type IDENT
/block ::= "{" local_decls stmt_list "}"
        | "{" stmt_list "}"
        | "{" local_decls "}"
        | "{" "}"
/local_decls ::= local_decls local_decl
            
/local_decl ::= var_type IDENT ";"
stmt_list ::= stmt_list stmt 
            
/stmt ::= expr_stmt 
    |  block 
    |  if_stmt 
    |  while_stmt 
    |  return_stmt
/expr_stmt ::= expr ";" 
            |  ";"
/while_stmt ::= "while" "(" expr ")" stmt 
/if_stmt ::= "if" "(" expr ")" block else_stmt
        | "if" "(" expr ")" block
/else_stmt  ::= "else" block
            
/return_stmt ::= "return" ";" 
            |  "return" expr ";"               
# operators in order of increasing precedence      
/expr ::= IDENT "=" expr  // AssignmentAST
    | rval      
/rval ::= rval "||" rval                                              
    | rval "&&" rval                                             
    | rval "==" rval | rval "!=" rval                            
    | rval "<=" rval | rval "<" rval | rval ">=" rval | rval ">" rval
    | rval "+" rval  | rval "-" rval
    | rval "*" rval  | rval "/" rval  | rval "%" rval
    | "-" rval | "!" rval
    | "(" expr ")"
    | IDENT | IDENT "(" args ")" | IDENT "(" ")"
    | INT_LIT | FLOAT_LIT | BOOL_LIT        
/args ::= arg_list 
    
/arg_list ::= arg_list "," expr
        |  expr          
